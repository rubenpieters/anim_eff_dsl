%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMagick 6.9.9
%%Title: pictures/line2IntroFig.eps
%%CreationDate: 2019-10-29T13:38:38+01:00
%%BoundingBox: -0 -0 412 120
%%HiResBoundingBox: 0 0 412 120
%%LanguageLevel: 3
%%Pages: 1
%%EndComments
%%BeginProlog
/ByteStreamDecodeFilter
{
  /z exch def
  /r exch def
  /c exch def
  z 0 eq { /ASCII85Decode filter } if
  z 1 eq
  {
    <<
      /K -1
      /Columns c
      /Rows r
    >>
    /CCITTFaxDecode filter
  } if
  z 2 eq { /DCTDecode filter } if
  z 3 eq { /LZWDecode filter } if
  z 4 eq { /RunLengthDecode filter } if
  z 5 eq { /FlateDecode filter } if
} bind def

/DirectClassImageDict
{
  colorspace 0 eq
  {
    /DeviceRGB setcolorspace
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent 8
      /DataSource pixel_stream
      /MultipleDataSources false
      /ImageMatrix [columns 0 0 rows neg 0 rows]
      /Decode [0 1 0 1 0 1]
    >>
  }
  {
    /DeviceCMYK setcolorspace
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent 8
      /DataSource pixel_stream
      /MultipleDataSources false
      /ImageMatrix [columns 0 0 rows neg 0 rows]
      /Decode
        compression 2 eq
        { [1 0 1 0 1 0 1 0] }
        { [0 1 0 1 0 1 0 1] }
        ifelse
    >>
  }
  ifelse
} bind def

/PseudoClassImageDict
{
  % Colors in colormap image.
  currentfile buffer readline pop
  token pop /colors exch def pop
  colors 0 eq
  {
    % Depth of grayscale image.
    currentfile buffer readline pop
    token pop /bits exch def pop
    /DeviceGray setcolorspace
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent bits
      /Decode [0 1]
      /ImageMatrix [columns 0 0 rows neg 0 rows]
      /DataSource pixel_stream
    >>
  }
  {
    % RGB colormap.
    /colormap colors 3 mul string def
    compression 0 eq
    { currentfile /ASCII85Decode filter colormap readstring pop pop }
    { currentfile colormap readstring pop pop }
    ifelse
    [ /Indexed /DeviceRGB colors 1 sub colormap ] setcolorspace
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent 8
      /Decode [0 255]
      /ImageMatrix [columns 0 0 rows neg 0 rows]
      /DataSource pixel_stream
    >>
  }
  ifelse
} bind def

/NonMaskedImageDict
{
  class 1 eq
  { PseudoClassImageDict }
  { DirectClassImageDict }
  ifelse
} bind def

/MaskedImageDict
{
  <<
    /ImageType 3
    /InterleaveType 3
    /DataDict NonMaskedImageDict
    /MaskDict
    <<
      /ImageType 1
      /Width columns
      /Height rows
      /BitsPerComponent 1
      /DataSource mask_stream
      /MultipleDataSources false
      /ImageMatrix [ columns 0 0 rows neg 0 rows]
      /Decode [ 0 1 ]
    >>
  >>
} bind def

/ClipImage
{} def

/DisplayImage
{
  gsave
  /buffer 512 string def
  % Translation.
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  x y translate
  % Image size and font size.
  currentfile buffer readline pop
  token pop /x exch def
  token pop /y exch def pop
  currentfile buffer readline pop
  token pop /pointsize exch def pop
  x y scale
  % Clipping path.
  currentfile buffer readline pop
  token pop /clipped exch def pop
  % Showpage.
  currentfile buffer readline pop
  token pop /sp exch def pop
  % Image pixel size.
  currentfile buffer readline pop
  token pop /columns exch def
  token pop /rows exch def pop
  % Colorspace (RGB/CMYK).
  currentfile buffer readline pop
  token pop /colorspace exch def pop
  % Transparency.
  currentfile buffer readline pop
  token pop /alpha exch def pop
  % Stencil mask?
  currentfile buffer readline pop
  token pop /stencil exch def pop
  % Image class (direct/pseudo).
  currentfile buffer readline pop
  token pop /class exch def pop
  % Compression type.
  currentfile buffer readline pop
  token pop /compression exch def pop
  % Clip and render.
  /pixel_stream currentfile columns rows compression ByteStreamDecodeFilter def
  clipped { ClipImage } if
  alpha stencil not and
  { MaskedImageDict mask_stream resetfile }
  { NonMaskedImageDict }
  ifelse
  stencil { 0 setgray imagemask } { image } ifelse
  grestore
  sp { showpage } if
} bind def
%%EndProlog
%%Page: 1 1
%%PageBoundingBox: 0 0 412 120
/ClipImage {} def
userdict begin
%%BeginData:         1208 BINARY Bytes
DisplayImage
0 0
412 120
12
false
false
412 120
0
false
false
0
5
x⁄Ì›1n[–Y!¨Ååux,u¿≤¬Ò¨nª«u´ﬁ)›¨§Vø£´'∆_˙}πcå1∆cå1èùÎÛ±µµµù±M~7[[[€£€‰w≥µµµ=∫M~7[[[€£€‰w≥µµµ›πΩcå1∆ò»˘¸„IvÜ7n2):∆çõLäéq„&ì¢c‹∏ı ˜ßüØN˜gæ•c]Œ»-Áô‹Á÷Ò\ß?Û∫ctå∑nÌŒ•c9œ‰∆-–≠›πt,Áô‹∏∫µ;óéÂ<ì∑@∑vÁz–3˜D«∏qÀwÎx.Ày&7ninœu˙3˝‡∆-ˇô~{Í∑ÃgrsßÖXÈ7n˘n≤?ˇÎòp„&£c‹∏IãºÒ∑¿≤·∆-–ÌÎóoßß¸ÏÔ–±G∏µ#ÕwÀTÌÓVEÍNõ‘±r¢¶nô™››‹i˘…ÔX9QS∑L’ÓnÓ¥1qßµsk≠ÎN:ı\√:V~ˆ¶n≠Uc›¬IßûkX« œﬁ‘≠µj¨[8È‘sÎX˘Ÿõ∫µVçu'ùzÆa+?{S∑÷™±n·§€Ô_≤3∑+ôF·∆M2£c‹∏…§Ë7n2):∆ç€∞ºÂàTïÑéï#p„wöéqÀ∑r7V:∆ç[y‹i:∆-3‹ ›XÈ7nÂqß=»Í√«O£c‹∏ıucuıóéq„ñÔ∂≤’-À(„∆-ﬂmY´[úùP:∆ç[æ€≤Vˇ‰z˘¯:∆ç[æ€ V€¡ Í7n˘nã[mG˛äéq„ñÔ∆jtå∑|7V:∆ç[y‹i:∆-3‹ ›XÈ7nÂqßÈ∑Ãp+wc•c‹∏ï«ù¶c‹2√≠‹çïéq„Vû™;mÒº∫cãá7…åéq„&ì¢c‹∏…§Ë7n√R˛áD≥ÂnÂn¨tå∑Ú∏”tå[f∏ïª±“1n‹ „N”1nô·VÓ∆Í6æ„√ç[w7VwPæ∑»ç[k∑ï≠|oë∑êúË∂¨ïÔ-r„ñì›ñµ⁄|oë∑òúË∂≤’Ê{ã‹∏e‰D∑≈≠6ﬂ[‰∆- '∫±⁄„∆-ﬂçïéq„VwöéqÀ∑r7V:∆ç[y‹i:∆-3‹ ›XÈ7nÂqßÈ∑Ãp+wc•c‹∏ïßÍN[<ØÓÿ‚·∆M2£c‹∏…§Ë7n√R˛£€ﬂ7∏Öá[π+„∆≠<Ó4„ñnÂn¨tå∑Ú∏”tå[f∏ïª±∫ão^p„÷⁄ç’îoìq„÷⁄me´;ﬂ[‰∆mÄ€≤Vw,æ∑»ç€7Væ∑»ç[yNt[÷jÛΩEn‹br¢€ VõÔ-r„ñë›∑⁄|oë∑ÄúË∆jtå∑|7V:∆ç[y‹i:∆-3‹ ›XÈ7nÂqßÈ∑Ãp+wc•c‹∏ï«ù¶c‹2√≠‹Mﬁ°cãá7…åéq„&ì¢c‹∏…§Ë7n˘πcå1∆cå1ûÎÛ±µµµù±M~7[[[€£€‰w≥µµµ=∫M~7[[[€£€‰w≥µµµ›πΩcå1∆ò»˘eØÖ#
%%EndData
end
%%PageTrailer
%%Trailer
%%EOF
