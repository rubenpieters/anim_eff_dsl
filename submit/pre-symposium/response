----------------------- REVIEW 1 ---------------------
> This paper describes the design and implementation of an EDSL for
> combining animations. The basic underlying technique used is the
> taggless final style, which offers good extensibility. The paper makes
> special effort in discussing the inspecablity property and the
> implication of that on various program features, particularly the
> monadic bind operator.
> 
> I think this is a good paper suitable for publication at TFP. The
> paper is relatively lightweight, but very neat. Though the underlying
> embedding technique is not new, it is used very appropriately for the
> application context, and resulting language is quite attractive. The
> presentation of the paper is very good. The implementation is
> explained clearly at the right level for TFP audience.

> My only comment
> is that the first paragraph of the introduction is slightly
> misleading. Its criticism of monad is certainly valid, but out of
> place.



> ----------------------- REVIEW 2 ---------------------
> Overall, my feeling with this paper is that this is a good start on
> the design but the evaluation of the design is lacking. There does not
> seem to be any interesting application built using this library that
> could give the authors some good feedback into the design
> itself. There are some pictures shown in the beginning of the paper,
> but there isn't any discussion of connection to a web browser or other
> GUI system so I am not even clear if these pictures are mockups or
> actually captured by running code from the library.

The application discussed in the paper uses the gloss library for as its GUI system. In the meantime we have also developed some other applications (another demo, an communication story example and a pacman game), some of which directly use the Haskell SDL bindings. We now emphasize these implementations more in the paper.

> It is a shame that the inspectability design constraint means that
> existing control operators cannot be used anymore.

The inspectability feature is opt-in, this means that it is perfectly fine to use traditional Monad constraints on animations if inspectability is no concern. Another way to regain the existing if-then-else for animations with inspectability requirement is the use of GHC's RebindableSyntax extension. We have added these notes to the paper.

> One (perhaps naive)
> thing I wonder: why not simply run the animation and see how long it
> was (perhaps caching the result)? I understand that won't work if,
> say, the duration depends on some external state (like the specific
> bytes coming over some network or something) but it seems like an
> approach like that would at least let you re-use the existing Haskell
> conditional operations and would probably give you the answer for any
> interesting animation, in practice.



> For those readers not familiar with the various details of thing like
> "the Functor-Applicative-Monad hierarchy", sections 4.1 and 4.2 were
> difficult to read. The `Animation` type and the related discussion in
> 4.3 was very helpful to understand how animations really work. Section
> 4.4, again, was difficult; I do not know what "interpreting PaSe to a
> different data type" means and I couldn't figure out what was really
> going on.



> In 6.3, I didn't understand why the duration was important. In
> particular, it would seem that if one wants to sequence animations,
> one could simply wait until the first animation finished (however long
> that was) and not need to know up front how long the first animation
> was going to be.



> pg8: "opt foran" => "opt for an"

Fixed.

> Overall, my advice to the authors is to spend some time implementing
> something with the library that attempts to captures something useful
> (possibly something useful in your own life, separatly from your
> research work even) and then try to use it to get some feedback on the
> design. Report on this application and see how it influences the
> design. Does the inspectability issue matter in practice? (Why?) Does
> something else come up that needs some thought or care?



> ----------------------- REVIEW 3 ---------------------
> The paper introduces PaSe -- a DSL embedded in Haskell for expressing micro-animations. In particular the authors target two aspects: extensibility and inspectability. The paper is very well written and provides interesting insights into different aspects of PaSe. The only limitation of the paper is a lack of any kind of evaluation to demonstrate effectiveness and performance of the approach.


